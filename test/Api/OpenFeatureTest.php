<?php
/**
 * DevCycle Bucketing API
 *
 * Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace DevCycle\Test\Api;

use DevCycle\Model\DevCycleUser;
use OpenFeature\implementation\flags\Attributes;
use OpenFeature\implementation\flags\EvaluationContext;
use PHPUnit\Framework\TestCase;

final class OpenFeatureTest extends TestCase
{

    public function testEvaluationContextTargetingKey()
    {

        $evalContextTK = new EvaluationContext(targetingKey: "test");
        $user = DevCycleUser::FromEvaluationContext($evalContextTK);
        self::assertEquals("test", $user->getUserId(), 'User ID not properly passed through/set');

        $attributes = new Attributes(array("user_id" => "test"));
        $evaluationContext = new EvaluationContext(attributes: $attributes);
        $user = DevCycleUser::FromEvaluationContext($evaluationContext);
        self::assertEquals("test", $user->getUserId(), 'User ID not properly passed through/set');

        $attributes = new Attributes(array("user_id" => "test"));
        $evaluationContext = new EvaluationContext(targetingKey: "test2", attributes: $attributes);
        $user = DevCycleUser::FromEvaluationContext($evaluationContext);
        self::assertEquals("test", $user->getUserId(), 'User ID not properly passed through/set');

    }
    public function testEvaluationContext()
    {
        $attributes = new Attributes(array(
            "user_id" => "test",
            "customData" => array(
                "customKey" => "customValue"
            ),
            "privateCustomData" => array(
                "privateKey" => "privateValue"
            ),
            "email" => "email@email.com",
            "name" => "Name Name",
            "language" => "EN",
            "country" => "CA",
            "appVersion" => "0.0.1",
            "appBuild" => 1,
            "nonSetValueBubbledCustomData" => true,
            "nonSetValueBubbledCustomData2" => "true",
            "nonSetValueBubbledCustomData3" => 1,
            "nonSetValueBubbledCustomData4" => null
        ));
        $evaluationContext = new EvaluationContext(attributes: $attributes);
        $user = DevCycleUser::FromEvaluationContext($evaluationContext);
        self::assertEquals("test", $user->getUserId(), 'User ID not properly passed through/set');
        self::assertEquals("customValue", $user->getCustomData()["customKey"], 'Custom Data not properly passed through/set');
        self::assertEquals("privateValue", $user->getPrivateCustomData()["privateKey"], 'Private Custom Data not properly passed through/set');
        self::assertEquals("email@email.com", $user->getEmail(), 'Email not properly passed through/set');
        self::assertEquals("Name Name", $user->getName(), 'Name not properly passed through/set');
        self::assertEquals("EN", $user->getLanguage(), 'Language not properly passed through/set');
        self::assertEquals("CA", $user->getCountry(), 'Country not properly passed through/set');
        self::assertEquals("0.0.1", $user->getAppVersion(), 'App Version not properly passed through/set');
        self::assertEquals(1, $user->getAppBuild(), 'App Build not properly passed through/set');
        self::assertEquals(true, $user->getCustomData()['nonSetValueBubbledCustomData'], 'Non Set Value Bubbled Custom Data not properly passed through/set');
        self::assertEquals("true", $user->getCustomData()['nonSetValueBubbledCustomData2'], 'Non Set Value Bubbled Custom Data 2 not properly passed through/set');
        self::assertEquals(1, $user->getCustomData()['nonSetValueBubbledCustomData3'], 'Non Set Value Bubbled Custom Data 3 not properly passed through/set');
        self::assertEquals(null, $user->getCustomData()['nonSetValueBubbledCustomData4'], 'Non Set Value Bubbled Custom Data 4 not properly passed through/set');
    }
}
